
z_acc:  --z_acc 
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
	select
		'0' gno,S1.a1 a1,S1.b1 b1,S2.a1 a2,S2.b1 b2,S3.a1 a3,S3.b1 b3
	from
		(select
			ROW_NUMBER()over(order by R1.recno)as recno,R1.acc1 a1,R1.acc2 b1
		from
			(select ROW_NUMBER()over(order by acc1)as recno, acc1,acc2 from acc[1] where acc1 between @t_baccno and @t_eaccno)as R1
		where R1.recno%3=1) as S1
	left join
		(select
			ROW_NUMBER()over(order by R1.recno)as recno,R1.acc1 a1,R1.acc2 b1
		from
			(select ROW_NUMBER()over(order by acc1)as recno, acc1,acc2 from acc[1] where acc1 between @t_baccno and @t_eaccno)as R1
		where R1.recno%3=2) As s2
	on s1.recno=s2.recno
	left join
		(select
			ROW_NUMBER()over(order by R1.recno)as recno,R1.acc1 a1,R1.acc2 b1
		from
			(select ROW_NUMBER()over(order by acc1)as recno, acc1,acc2 from acc[1] where acc1 between @t_baccno and @t_eaccno)as R1
		where R1.recno%3=0) as s3
	on s1.recno=s3.recno
	order by S1.recno;
	
z_acc2: --z_acc2
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
	select '0' gno, acc1,acc2,acc3,acc4,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,beginmoney),1)),4,12)) beginmoney,
	acc7,oacc,lok,yeara
	from acc101_1 
	where acc1 between @t_baccno and @t_eaccno 
	order by acc1;

z_actot1:--z_actot1
	declare @t_acclen int
	set @t_acclen = 4
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	declare @result table(
		gno nvarchar(1),
		recno int,
		typea nvarchar(1),
		acc1 nvarchar(4),
		acc2 nvarchar(40),
		accc1  nvarchar(10),
		accc2  nvarchar(10),
		accc3  nvarchar(25),
		accc4  nvarchar(12),
		accc5  nvarchar(25),
		accc6  nvarchar(86),
		accc7  nvarchar(340),
		accc8  decimal(16,2),
		zno  nvarchar(20),
		ver  varchar(50),
		noq  nvarchar(3),
		part  nvarchar(18),
		coin  nvarchar(30),
		floata  decimal(10,5),
		n int,
		dmoney  decimal(20,0),
		cmoney  decimal(20,0),
		[money]  decimal(20,0),
		totMoney decimal(20,0)
		primary key (acc1,recno) 
	)
	insert into @result
	select
		'0' gno, ROW_NUMBER()over(order by acc1,typea,accc2,accc5,accc3)as recno,R1.typea,R1.acc1,R1.acc2,R1.accc1,R1.accc2,
		R1.accc3,R1.accc4,R1.accc5,R1.accc6,R1.accc7,R1.accc8,R1.zno,R1.ver,R1.noq,R1.part,R1.coin,R1.floata,R1.n,R1.dmoney,
		R1.cmoney,R1.money, 0 totMoney
	from(
		select 'B' typea,
			substring(b.accc5,1,4) acc1,'' acc2,
			b.accc1,b.accc2,b.accc3,b.accc4,b.accc5,b.accc6,b.accc7,b.accc8,b.zno,b.ver,b.noq,b.part,b.coin,b.floata,b.cmoney,b.dmoney,
			case when substring(b.accc5,1,1)='1' or substring(b.accc5,1,1)='5' or substring(b.accc5,1,1)='6' or substring(b.accc5,1,1)='8' or substring(b.accc5,1,2)='73' then 1 else -1 end n,
			--case when b.accc4='借' then b.accc8 else 0 end dmoney,
			--case when b.accc4='借' then 0 else b.accc8 end cmoney,
			(case when substring(b.accc5,1,1)='1' or substring(b.accc5,1,1)='5' or substring(b.accc5,1,1)='6' or substring(b.accc5,1,1)='8' or substring(b.accc5,1,2)='73' then 1 else -1 end)*(case when b.accc4='借' then b.accc8 else -b.accc8 end) money
		from acccs[1] b where (b.accc5 between @t_baccno and left(@t_eaccno,5)+'zz') and (isnull(b.part,'') between @t_bpart and @t_epart) and b.accc2<=@t_edate
		union
		select 'A' typea, 
			substring(acc.acc1,1,4) acc1, '' acc2, '' accc1, '01/01' accc2, '' accc3, '' accc4, acc.acc1 accc5, '' accc6, '期初'+acc.acc1+':'+right('               '+convert(varchar(15),acc.beginmoney),15) accc7, 0 accc8, '' zno, '' ver, '' noq, '' part,'' coin, 0 floata,
			1 n, 
			0 dmoney,
			0 cmoney,
			acc.beginmoney money
		from acc[1] acc where acc.beginmoney!=0  and acc.acc1 between @t_baccno and @t_eaccno
		) as R1
	--***********************************************************
	declare @t_acc1 as nvarchar(4)
	declare @t_dmoney as decimal(16,2)
	declare @t_cmoney as decimal(16,2)
	declare @t_money as decimal(16,2)
	declare @t_totMoney as decimal(16,2)
	declare @recno as decimal(16)
	declare @typea as nvarchar(1)
	declare @accc2 as nvarchar(10)
	declare @accc5 as nvarchar(25)
	declare @acc1 as nvarchar(4)
	declare @acc2 as nvarchar(40)
	declare @dmoney as decimal(16,2)
	declare @cmoney as decimal(16,2)
	declare @money as decimal(16,2)

	set @t_acc1 = 'x@#$'
	set @t_dmoney = 0.0
	set @t_cmoney = 0.0
	set @t_money = 0.0
	set @t_totMoney = 0.0

	declare cursor_table cursor for
	select recno,typea,accc2,accc5,acc1,dmoney,cmoney,money from @result order by acc1,recno
	open cursor_table
	fetch next from cursor_table
	into @recno,@typea,@accc2,@accc5,@acc1,@dmoney,@cmoney,@money
	while(@@FETCH_STATUS <> -1)
	begin
		if @t_acc1=@acc1
		begin
			if @accc2 >= @t_bdate
			begin
				if @typea='B'
				begin
					set @t_dmoney = @t_dmoney + @dmoney
					set @t_cmoney = @t_cmoney + @cmoney
				end
				set @t_money = @t_money + @money
			end
			set @t_totMoney = @t_totMoney + @money
		end
		else
		begin
			if @t_acc1 != 'x@#$'
			begin
				insert into @result 
				select '1' gno,0 recno,'C' typea,@t_acc1 acc1, '' acc2, '' accc1, '' accc2, '' accc3, '' accc4,'' accc5,
				 '' accc6, '' accc7, 0 accc8, '' zno, '' ver, '' noq, '' part,
				'' coin, 0 floata, 1 n, @t_dmoney dmoney, @t_cmoney cmoney, @t_money money, @t_totMoney totmoney
				
			end
			if @accc2 >= @t_bdate
			begin
				if @typea='B'
				begin
					set @t_dmoney = @dmoney
					set @t_cmoney = @cmoney
				end
				else
				begin
					set @t_dmoney = 0
					set @t_cmoney = 0
				end
				set @t_money = @money
			end
			else
			begin
				set @t_dmoney = 0
				set @t_cmoney = 0
				set @t_money = 0
			end
			set @t_acc1 = @acc1
			set @t_totMoney = @money
		end
		update @result set totMoney = @t_totMoney where acc1= @t_acc1 and recno = @recno
	fetch next from cursor_table
	into @recno,@typea,@accc2,@accc5,@acc1,@dmoney,@cmoney,@money
	end
	close cursor_table
	deallocate cursor_table
	
	if @t_acc1 != 'x@#$'
	begin
		insert into @result 
		select '1' gno,0 recno,'C' typea,@t_acc1 acc1, '' acc2, '' accc1, '' accc2, '' accc3, '' accc4,'' accc5, '' accc6, '' accc7, 0 accc8, '' zno, '' ver, '' noq, '' part,
		'' coin, 0 floata, 1 n, @t_dmoney dmoney, @t_cmoney cmoney, @t_money money, @t_totMoney totmoney
	end

	declare cursor_table cursor for
	select acc1,acc2 from acc[1] where len(acc1)=@t_acclen order by acc1
	open cursor_table
	fetch next from cursor_table
	into @acc1,@acc2
	while(@@FETCH_STATUS <> -1)
	begin
		update @result set acc2 = @acc2 where acc1= @acc1
	fetch next from cursor_table
	into @acc1,@acc2
	end
	close cursor_table
	deallocate cursor_table
	--***********************************************************
	select * 
	,reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(dmoney,0)),1)),4,12)) dm1
	,reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(cmoney,0)),1)),4,12)) cm1
	,reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(totmoney,0)),1)),4,12)) tot1
	from @result
	where gno='1' or accc2 between @t_bdate and @t_edate order by acc1,gno,recno;

z_actot2:--z_actot2
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
	declare @result table(
		gno nvarchar(1),
		recno int,
		accc1  nvarchar(10),
		accc2  nvarchar(10),
		accc3  nvarchar(25),
		accc4  nvarchar(12),
		accc5  nvarchar(25),
		accc6  nvarchar(86),
		accc7  nvarchar(340),
		accc8  decimal(16,2),
		zno  nvarchar(20),
		ver  varchar(50),
		noq  nvarchar(3),
		part  nvarchar(18),
		coin  nvarchar(30),
		floata  decimal(10,5),
		n int,
		dmoney  decimal(20,0),
		cmoney  decimal(20,0),
		[money]  decimal(20,0),
		totMoney decimal(20,0)
		primary key (accc5,recno) 
	)
	insert into @result
	select
		'0' gno, ROW_NUMBER()over(order by accc5,accc2,accc3)as recno,R1.accc1,R1.accc2,R1.accc3,R1.accc4,R1.accc5,
		R1.accc6,R1.accc7,R1.accc8,R1.zno,R1.ver,R1.noq,R1.part,R1.coin,R1.floata,R1.n,R1.dmoney,R1.cmoney, (R1.dmoney-R1.cmoney)*R1.n money, 0 totMoney
	from(
		select b.* ,
		case when substring(b.accc5,1,1)='1' or substring(b.accc5,1,1)='5' or substring(b.accc5,1,1)='6' or substring(b.accc5,1,1)='8' or substring(b.accc5,1,2)='73' then 1 else -1 end n
		--,case when b.accc4='借' then b.accc8 else 0 end dmoney,
		--case when b.accc4='借' then 0 else b.accc8 end cmoney
		from acccs[1] b where (b.accc5 between @t_baccno and @t_eaccno) and (isnull(b.part,'') between @t_bpart and @t_epart) and b.accc2<=@t_edate ) as R1
	union
		select '0' gno,-1 recno, '' accc1, '01/01' accc2, '' accc3, '' accc4, acc.acc1 accc5, '' accc6, '期初金額' accc7, 0 accc8, '' zno, '' ver, '' noq, '' part,
			'' coin, 0 floata, 1 n, 0 dmoney,0 cmoney, acc.beginmoney money, acc.beginmoney totMoney
		from acc[1] acc where acc.beginmoney!=0  and acc.acc1 between @t_baccno and @t_eaccno
	
	--***********************************************************
	declare @t_accc5 as nvarchar(25)
	declare @t_dmoney as decimal(16,2)
	declare @t_cmoney as decimal(16,2)
	declare @t_money as decimal(16,2)
	declare @t_totMoney as decimal(16,2)
	declare @recno as decimal(16)
	declare @accc2 as nvarchar(10)
	declare @accc5 as nvarchar(25)
	declare @dmoney as decimal(16,2)
	declare @cmoney as decimal(16,2)
	declare @money as decimal(16,2)

	set @t_accc5 = 'xxx###x$#xxx'
	set @t_dmoney = 0.0
	set @t_cmoney = 0.0
	set @t_money = 0.0
	set @t_totMoney = 0.0

	declare cursor_table cursor for
	select recno,accc2,accc5,dmoney,cmoney,money from @result order by accc5,recno
	open cursor_table
	fetch next from cursor_table
	into @recno,@accc2,@accc5,@dmoney,@cmoney,@money
	while(@@FETCH_STATUS <> -1)
	begin
		if @t_accc5=@accc5
		begin
			if @accc2 >= @t_bdate
			begin
				set @t_dmoney = @t_dmoney + @dmoney
				set @t_cmoney = @t_cmoney + @cmoney
				set @t_money = @t_money + @money
			end
			set @t_totMoney = @t_totMoney + @money
		end
		else
		begin
			if @t_accc5 != 'xxx###x$#xxx'
			begin
				insert into @result 
				select '1' gno,0 recno, '' accc1, '' accc2, '' accc3, '' accc4,@t_accc5 accc5, '' accc6, '' accc7, 0 accc8, '' zno, '' ver, '' noq, '' part,
				'' coin, 0 floata, 1 n, @t_dmoney dmoney, @t_cmoney cmoney, @t_money money, @t_totMoney totmoney
			end
			if @accc2 >= @t_bdate
			begin
				set @t_dmoney = @dmoney
				set @t_cmoney = @cmoney
				set @t_money = @money
			end
			else
			begin
				set @t_dmoney = 0
				set @t_cmoney = 0
				set @t_money = 0
			end
			set @t_accc5 = @accc5
			set @t_totMoney = @money
		end
		update @result set totMoney = @t_totMoney where accc5= @t_accc5 and recno = @recno
	fetch next from cursor_table
	into @recno,@accc2,@accc5,@dmoney,@cmoney,@money
	end
	if @t_accc5 != 'xxx###x$#xxx'
	begin
		insert into @result 
			select '1' gno,0 recno, '' accc1, '' accc2, '' accc3, '' accc4,@t_accc5 accc5, '' accc6, '' accc7, 0 accc8, '' zno, '' ver, '' noq, '' part,
			'' coin, 0 floata, 1 n, @t_dmoney dmoney, @t_cmoney cmoney, @t_money money, @t_totMoney totmoney
	end
	close cursor_table
	deallocate cursor_table
	--***********************************************************
	select * 
	,reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(dmoney,0)),1)),4,12)) dm1
	,reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(cmoney,0)),1)),4,12)) cm1
	,reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(totmoney,0)),1)),4,12)) tot1
	from @result
	where gno='1' or accc2 between @t_bdate and @t_edate  order by accc5,gno,recno;

z_actot3:--z_actot3
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
		declare @tmp table(
			gno nvarchar(1),
			accc5 nvarchar(20),
			dmoney int,
			cmoney int,
			[money] int,
			acc2 nvarchar(50),
			beginmoney int,
			lastmoney int
	)
	insert into @tmp
	select S1.gno,s1.accc5,s1.dmoney,s1.cmoney,s1.money, acc.acc2, isNull(acc.beginmoney,0) + isNull(s2.money,0) as beginMoney, isNull(acc.beginmoney,0) + isNull(s1.money,0) + isNull(s2.money,0) as lastMoney
	from(
		select
			'0' gno, accc5,
			SUM(dmoney) dmoney, SUM(cmoney) cmoney, SUM((dmoney-Cmoney)*n) money
		from(
			select b.* ,
			case when substring(b.accc5,1,1)='1' or substring(b.accc5,1,1)='5' or substring(b.accc5,1,1)='6' or substring(b.accc5,1,1)='8' or substring(b.accc5,1,2)='73' then 1 else -1 end n
			from acccs[1] b where (b.accc5 between @t_baccno and @t_eaccno) and (isnull(b.part,'') between @t_bpart and @t_epart) and (b.accc2 between @t_bdate and @t_edate)) as R1
		group by accc5
		) AS s1
	left join acc[1] acc on acc.acc1=s1.accc5
	left join
		(select accc5,SUM(dmoney) dmoney, SUM(cmoney) cmoney, SUM((dmoney-Cmoney)*n) money
		from
		(select b.* ,
			case when substring(b.accc5,1,1)='1' or substring(b.accc5,1,1)='5' or substring(b.accc5,1,1)='6' or substring(b.accc5,1,1)='8' or substring(b.accc5,1,2)='73' then 1 else -1 end n
		from acccs[1] b where (b.accc5 between @t_baccno and @t_eaccno) and (isnull(b.part,'') between @t_bpart and @t_epart) and b.accc2<@t_bdate) as R2
		group by accc5
		)as S2
	on s1.accc5 = S2.accc5
	
	
	select gno,accc5,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,dmoney),1)),4,12)) dmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,cmoney),1)),4,12)) cmoney,
	acc2,reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,beginmoney),1)),4,12)) beginmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,lastmoney),1)),4,12)) lastmoney
	from @tmp
	order by accc5,gno;

z_acday1:--z_acday1
	declare @t_chk1 nvarchar(1)
	set @t_chk1 = 'Y'--是否顯示現金傳票
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	declare @result table(
		gno nvarchar(1),
		p nvarchar(1),
		typea nvarchar(1) not null,
		accc1  nvarchar(10),
		accc2  nvarchar(10) ,
		accc3  nvarchar(25) ,
		oaccc3  nvarchar(25) not null,
		accc4  nvarchar(12),
		accc5  nvarchar(25),
		accc6  nvarchar(86),
		accc7  nvarchar(340),
		accc8  decimal(16,2),
		zno  nvarchar(20),
		ver  varchar(50),
		noq  nvarchar(3) not null,
		part  nvarchar(18),
		coin  nvarchar(30),
		floata  decimal(10,5),
		dmoney  decimal(20,0),
		cmoney  decimal(20,0)
		primary key (oaccc3,noq,typea) 
	)
	
	insert @result
	select '0' gno, '1' p, '0' typea, b.accc1,b.accc2,b.accc3,b.accc3,b.accc4,b.accc5,b.accc6,b.accc7,b.accc8,b.zno,b.ver,
	b.noq,b.part,b.coin,b.floata,b.dmoney,b.cmoney
	from acccs[1] b 
	where (b.accc1='3' or b.accc1!='3' and @t_chk1='Y') and
		  (b.accc5 between @t_baccno and @t_eaccno) and 
		  (isnull(b.part,'') between @t_bpart and @t_epart) and 
		  (b.accc2 between @t_bdate and @t_edate)
	--**************************************************************************************
	declare @typea  nvarchar(1)
	declare @accc1  nvarchar(10)
	declare @accc2  nvarchar(10)
	declare @accc3  nvarchar(25)
	declare @oaccc3  nvarchar(25)
	declare @accc4  nvarchar(12)
	declare @accc5  nvarchar(25)
	declare @accc6  nvarchar(86)
	declare @accc7  nvarchar(340)
	declare @accc8  decimal(16,2)
	declare @zno  nvarchar(20)
	declare @ver  varchar(50)
	declare @noq  nvarchar(3)
	declare @part  nvarchar(18)
	declare @coin  nvarchar(30)
	declare @floata  decimal(10,5)
	declare @t_accc3 nvarchar(20)
	declare @t_accc2 nvarchar(20)
	set @t_accc2= 'qqqqq'
	set @t_accc3 = 'qqqqqq'
	declare cursor_table cursor for
	select typea,accc1,accc2,accc3,oaccc3,accc4,accc5,accc6,accc7,accc8,zno,ver,noq,part,coin,floata
	from @result order by oaccc3,noq,typea
	open cursor_table 
	fetch next from cursor_table
	into @typea,@accc1,@accc2,@accc3,@oaccc3,@accc4,@accc5,@accc6,@accc7,@accc8,@zno,@ver,@noq,@part,@coin,@floata
	while(@@FETCH_STATUS <> -1)
	begin

		if @accc1 = '1' and @typea!='1'
		begin
			insert @result
			select '0' gno, '1' p, '1' typea,@accc1 accc1,@accc2 accc2,@accc3 accc3,@oaccc3 oaccc3,'借' accc4,@accc5 accc5,
			       '現金' accc6,@accc7 accc7,@accc8 accc8,'' zno,@ver ver,@noq noq,@part part,@coin coin,
			       @floata float,@accc8 dmoney,0 cmoney
		end
		
		if @accc1 = '2' and @typea!='2'
		begin
			insert @result
			select '0' gno, '1' p, '2' typea,@accc1 accc1,@accc2 accc2,@accc3 accc3,@oaccc3 oaccc3,'貸' accc4,@accc5 accc5,
			       '現金' accc6,@accc7 accc7,@accc8 accc8,@zno zno,@ver ver,@noq noq,@part part,@coin coin,
			       @floata float,0 dmoney,@accc8 cmoney
		end
	fetch next from cursor_table
	into @typea,@accc1,@accc2,@accc3,@oaccc3,@accc4,@accc5,@accc6,@accc7,@accc8,@zno,@ver,@noq,@part,@coin,@floata
	end
	close cursor_table
	deallocate cursor_table
	
	declare cursor_table cursor for
	select typea,accc1,accc2,accc3,oaccc3,accc4,accc5,accc6,accc7,accc8,zno,ver,noq,part,coin,floata
	from @result order by oaccc3,noq,typea
	open cursor_table 
	fetch next from cursor_table
	into @typea,@accc1,@accc2,@accc3,@oaccc3,@accc4,@accc5,@accc6,@accc7,@accc8,@zno,@ver,@noq,@part,@coin,@floata
	while(@@FETCH_STATUS <> -1)
	begin
		if (@accc3 =  @t_accc3) and (@accc2 = @t_accc2) and (@t_accc2 != 'qqqqq') and (@t_accc3 != 'qqqqqq')
		begin
			update @result set accc3 = '' , accc2 = '' where current of cursor_table
		end
		else
		begin
			set @t_accc2 = @accc2
			set @t_accc3 = @accc3
		end
	fetch next from cursor_table
	into @typea,@accc1,@accc2,@accc3,@oaccc3,@accc4,@accc5,@accc6,@accc7,@accc8,@zno,@ver,@noq,@part,@coin,@floata
	end
	close cursor_table
	deallocate cursor_table
	
	--**************************************************************************************
	select gno,p,typea,accc1,accc2,accc3,oaccc3,accc4,accc5,accc6,accc7,accc8,zno,ver,noq,part,coin,floata,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,dmoney),1)),4,12)) dmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,cmoney),1)),4,12)) cmoney
	from @result
	order by oaccc3,noq,typea;
	

z_acin:--z_acin
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
	declare @tmp table(
			gno nvarchar(1),
			acc1 nvarchar(20),
			acc2 nvarchar(50),
			dmoney int,
			cmoney int,
			[money] int
	)
	insert into @tmp
	select '0' gno, R1.acc1 acc1, R1.acc2 acc2, R2.dmoney dmoney, R2.cmoney cmoney, isnull(R2.cmoney,0)-isnull(R2.dmoney,0) money
	from
		(select acc1,acc2 from acc[1] where (acc1 between @t_baccno and @t_eaccno) and (LEFT(acc1,1)='4' or LEFT(acc1,2)='71')) as R1
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R2
	on R1.acc1 = R2.accc5 
	where isnull(R2.dmoney,0)-isnull(R2.cmoney,0)!=0
	
	select gno,acc1,acc2,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(dmoney,0)),1)),4,12)) dmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(cmoney,0)),1)),4,12)) cmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,isnull(money,0)),1)),4,12)) money
	from @tmp
	order by acc1;

z_acin2:--z_acin2
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
	declare @tmp table(
			gno nvarchar(1),
			acc1 nvarchar(20),
			acc2 nvarchar(50),
			m01 int,
			m02 int,
			m03 int,
			m04 int,
			m05 int,
			m06 int,
			m07 int,
			m08 int,
			m09 int,
			m10 int,
			m11 int,
			m12 int,
			total int
	)
	insert into @tmp
	select '0' gno, R0.acc1 acc1, R0.acc2 acc2, 
			isnull(R1.cmoney,0)-isnull(R1.dmoney,0) m01,
			isnull(R2.cmoney,0)-isnull(R2.dmoney,0) m02,
			isnull(R3.cmoney,0)-isnull(R3.dmoney,0) m03,
			isnull(R4.cmoney,0)-isnull(R4.dmoney,0) m04,
			isnull(R5.cmoney,0)-isnull(R5.dmoney,0) m05,
			isnull(R6.cmoney,0)-isnull(R6.dmoney,0) m06,
			isnull(R7.cmoney,0)-isnull(R7.dmoney,0) m07,
			isnull(R8.cmoney,0)-isnull(R8.dmoney,0) m08,
			isnull(R9.cmoney,0)-isnull(R9.dmoney,0) m09,
			isnull(R10.cmoney,0)-isnull(R10.dmoney,0) m10,
			isnull(R11.cmoney,0)-isnull(R11.dmoney,0) m11,
			isnull(R12.cmoney,0)-isnull(R12.dmoney,0) m12,
			isnull(R13.cmoney,0)-isnull(R13.dmoney,0) total
	from
		(select acc1,acc2 from acc[1] where (acc1 between @t_baccno and @t_eaccno) and (LEFT(acc1,1)='4' or LEFT(acc1,2)='71')) as R0
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='01' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R1
	on R0.acc1 = R1.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='02' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R2		   
	on R0.acc1 = R2.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='03' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R3
	on R0.acc1 = R3.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='04' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R4
	on R0.acc1 = R4.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='05' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R5
	on R0.acc1 = R5.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='06' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R6
	on R0.acc1 = R6.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='07' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R7
	on R0.acc1 = R7.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='08' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R8
	on R0.acc1 = R8.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='09' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R9
	on R0.acc1 = R9.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='10' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R10
	on R0.acc1 = R10.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='11' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R11
	on R0.acc1 = R11.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='12' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R12
	on R0.acc1 = R12.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R13
	on R0.acc1 = R13.accc5 
	where not(isnull(R1.dmoney-R1.cmoney,0)=0 and isnull(R2.dmoney-R2.cmoney,0)=0 and isnull(R3.dmoney-R3.cmoney,0)=0 and
			  isnull(R4.dmoney-R4.cmoney,0)=0 and isnull(R5.dmoney-R5.cmoney,0)=0 and isnull(R6.dmoney-R6.cmoney,0)=0 and
			  isnull(R7.dmoney-R7.cmoney,0)=0 and isnull(R8.dmoney-R8.cmoney,0)=0 and isnull(R9.dmoney-R9.cmoney,0)=0 and
			  isnull(R10.dmoney-R10.cmoney,0)=0 and isnull(R11.dmoney-R11.cmoney,0)=0 and isnull(R12.dmoney-R12.cmoney,0)=0)
	select gno,acc1,acc2,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m01),1)),4,12)) m01,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m02),1)),4,12)) m02,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m03),1)),4,12)) m03,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m04),1)),4,12)) m04,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m05),1)),4,12)) m05,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m06),1)),4,12)) m06,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m07),1)),4,12)) m07,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m08),1)),4,12)) m08,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m09),1)),4,12)) m09,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m10),1)),4,12)) m10,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m11),1)),4,12)) m11,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m12),1)),4,12)) m12,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,total),1)),4,12)) total
	from @tmp
	order by acc1;

z_acout:--z_acout
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
	declare @tmp table(
			gno nvarchar(1),
			acc1 nvarchar(20),
			acc2  nvarchaR(50),
			dmoney int,
			cmoney int,
			[money] int
	)
	insert into @tmp
	select '0' gno, R1.acc1 acc1, R1.acc2 acc2, R2.dmoney dmoney, R2.cmoney cmoney, isnull(R2.dmoney,0)-isnull(R2.cmoney,0) money
	from
		(select acc1,acc2 from acc[1] where (acc1 between @t_baccno and @t_eaccno) and (LEFT(acc1,1)>='5' and LEFT(acc1,2)!='71')) as R1
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R2
	on R1.acc1 = R2.accc5 
	where isnull(R2.dmoney,0)-isnull(R2.cmoney,0)!=0
	
	select gno,acc1,acc2,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,dmoney),1)),4,12))  dmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,cmoney),1)),4,12)) cmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,money),1)),4,12)) money
	from @tmp
	order by acc1;

z_acout2:--z_acout2
	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end
	
	declare @tmp table(
			gno nvarchar(1),
			acc1 nvarchar(20),
			acc2 nvarchar(50),
			m01 int,
			m02 int,
			m03 int,
			m04 int,
			m05 int,
			m06 int,
			m07 int,
			m08 int,
			m09 int,
			m10 int,
			m11 int,
			m12 int,
			total int
	)
	insert into @tmp
	select '0' gno, R0.acc1 acc1, R0.acc2 acc2, 
			isnull(R1.dmoney,0)-isnull(R1.cmoney,0) m01,
			isnull(R2.dmoney,0)-isnull(R2.cmoney,0) m02,
			isnull(R3.dmoney,0)-isnull(R3.cmoney,0) m03,
			isnull(R4.dmoney,0)-isnull(R4.cmoney,0) m04,
			isnull(R5.dmoney,0)-isnull(R5.cmoney,0) m05,
			isnull(R6.dmoney,0)-isnull(R6.cmoney,0) m06,
			isnull(R7.dmoney,0)-isnull(R7.cmoney,0) m07,
			isnull(R8.dmoney,0)-isnull(R8.cmoney,0) m08,
			isnull(R9.dmoney,0)-isnull(R9.cmoney,0) m09,
			isnull(R10.dmoney,0)-isnull(R10.cmoney,0) m10,
			isnull(R11.dmoney,0)-isnull(R11.cmoney,0) m11,
			isnull(R12.dmoney,0)-isnull(R12.cmoney,0) m12,
			isnull(R13.dmoney,0)-isnull(R13.cmoney,0) total
	from
		(select acc1,acc2 from acc[1] where (acc1 between @t_baccno and @t_eaccno) and (LEFT(acc1,1)>='5' and LEFT(acc1,2)!='71')) as R0
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='01' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R1
	on R0.acc1 = R1.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='02' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R2		   
	on R0.acc1 = R2.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='03' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R3
	on R0.acc1 = R3.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='04' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R4
	on R0.acc1 = R4.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='05' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R5
	on R0.acc1 = R5.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='06' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R6
	on R0.acc1 = R6.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='07' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R7
	on R0.acc1 = R7.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='08' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R8
	on R0.acc1 = R8.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='09' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R9
	on R0.acc1 = R9.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='10' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R10
	on R0.acc1 = R10.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='11' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R11
	on R0.acc1 = R11.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where left(accc2,2)='12' and (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R12
	on R0.acc1 = R12.accc5 
	left join (select accc5, sum(dmoney) dmoney, sum(cmoney) cmoney 
			   from acccs[1] where (accc2 between @t_bdate and @t_edate) and (part between @t_bpart and @t_epart) group by accc5) as R13
	on R0.acc1 = R13.accc5 
	where not(isnull(R1.dmoney-R1.cmoney,0)=0 and isnull(R2.dmoney-R2.cmoney,0)=0 and isnull(R3.dmoney-R3.cmoney,0)=0 and
			  isnull(R4.dmoney-R4.cmoney,0)=0 and isnull(R5.dmoney-R5.cmoney,0)=0 and isnull(R6.dmoney-R6.cmoney,0)=0 and
			  isnull(R7.dmoney-R7.cmoney,0)=0 and isnull(R8.dmoney-R8.cmoney,0)=0 and isnull(R9.dmoney-R9.cmoney,0)=0 and
			  isnull(R10.dmoney-R10.cmoney,0)=0 and isnull(R11.dmoney-R11.cmoney,0)=0 and isnull(R12.dmoney-R12.cmoney,0)=0)
	select gno,acc1,acc2,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m01),1)),4,12))  m01,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m02),1)),4,12))  m02,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m03),1)),4,12))  m03,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m04),1)),4,12))  m04,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m05),1)),4,12))  m05,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m06),1)),4,12))  m06,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m07),1)),4,12))  m07,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m08),1)),4,12))  m08,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m09),1)),4,12))  m09,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m10),1)),4,12))  m10,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m11),1)),4,12))  m11,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,m12),1)),4,12))  m12,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,total),1)),4,12))  total
	from @tmp 
	order by acc1;

z_acash:--z_acash
   	declare @t_bdate nvarchar(10)
	declare @t_edate nvarchar(10)
	declare @t_baccno nvarchar(25)
	declare @t_eaccno nvarchar(25)
	declare @t_bpart nvarchar(18)
	declare @t_epart nvarchar(18)
	set @t_bdate = case when '#non'=[2] then '' else [2] end
	set @t_edate = case when '#non'=[3] then char(255) else [3] end
	set @t_baccno = case when '#non'=[4] then '' else [4] end
	set @t_eaccno = case when '#non'=[5] then char(255) else [5] end
	set @t_bpart = case when '#non'=[6] then '' else [6] end
	set @t_epart = case when '#non'=[7] then char(255) else [7] end

	
	declare @result table(
		p nvarchar(1),
		gno nvarchar(1),
		recno int,
		accc1  nvarchar(10),
		accc2  nvarchar(10),
		accc3  nvarchar(25),
		accc4  nvarchar(12),
		accc5  nvarchar(25),
		accc6  nvarchar(86),
		accc7  nvarchar(340),
		accc8  decimal(16,2),
		zno  nvarchar(20),
		ver  varchar(50),
		noq  nvarchar(3),
		part  nvarchar(18),
		coin  nvarchar(30),
		floata  decimal(10,5),
		dmoney  decimal(20,0),
		cmoney  decimal(20,0),
		money  decimal(20,0)
		primary key (accc5,recno) 
	)
	
	insert into @result
	select '1' p, '0' gno, ROW_NUMBER()over(order by accc5,accc2,accc3) recno,accc1,accc2,accc3,accc4,
	accc5,accc6,accc7,accc8,zno,ver,noq,part,coin,floata,
			dmoney dmoney,
			cmoney cmoney,
			0 money
	from acccs[1]
	where not(LEFT(accc5,4)!='1111' and accc1='3') and 
		  (accc5 between @t_baccno and @t_eaccno) and
	      (part between @t_bpart and @t_epart) and 
	      (accc2 between @t_bdate and @t_edate)
	         
	--**********************************************************************
	
	declare @recno as decimal(16)
	declare @accc2 as nvarchar(10)
	declare @accc5 as nvarchar(25)
	declare @dmoney as decimal(16,2)
	declare @cmoney as decimal(16,2)

	declare @t_dmoney as decimal(16,2)
	declare @t_cmoney as decimal(16,2)
	declare @t_money as decimal(18,2)
	set @t_dmoney = 0
	set @t_cmoney = 0
	set @t_money = 0		
	
	declare cursor_table cursor for
	select recno,accc2,accc5,dmoney,cmoney from @result order by accc5,recno
	open cursor_table
	fetch next from cursor_table
	into @recno,@accc2,@accc5,@dmoney,@cmoney
	while(@@FETCH_STATUS <> -1)
	begin
		set @t_dmoney = @t_dmoney + @dmoney
		set @t_cmoney = @t_cmoney + @cmoney
		set @t_money = @t_money + @dmoney - @cmoney
		
		update @result set money = @t_money where accc5=@accc5 and recno = @recno
		fetch next from cursor_table
		into @recno,@accc2,@accc5,@dmoney,@cmoney
	end
	close cursor_table
	deallocate cursor_table
	insert into @result
		select '1' p, '1' gno,0 recno, '' accc1, '' accc2, '' accc3, '' accc4,'' accc5, '' accc6, '' accc7, 0 accc8, '' zno, '' ver, '' noq, '' part,
		'' coin, 0 floata, @t_dmoney dmoney, @t_cmoney cmoney, @t_money money
	--**********************************************************************
	select p,gno,recno,accc1,accc2,accc3,accc4,accc5,accc6,accc7,accc8,zno,ver,noq,part,coin,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,floata),1)),4,12))  floata,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,dmoney),1)),4,12)) dmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,cmoney),1)),4,12)) cmoney,
	reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,money),1)),4,12)) money
	from @result order by p,gno,recno;
--***********************************************************************************

z_acbal1:--z_acbal1
declare @t_xbal nvarchar(10)
declare @t_bdate nvarchar(20)
declare @t_edate nvarchar(20)
declare @t_xaccc5 nvarchar(20)
set @t_bdate = case when '#non' = [2] then '' else [2] end
set @t_edate = case when '#non' = [3] then CHAR(255) else [3] end
set @t_xbal = case when '#non' = [10] then '' else [10] end
set @t_xaccc5 = case when '#non' = [11] then '' else [11] end
declare @tmp table(
		gno nvarchar(1),
		noa nvarchar(30),
		datea nvarchar(10),
		accc5 nvarchar(20),
		accc6 nvarchar(20),
		accc7 nvarchar(340),
		part nvarchar(20),
		bal nvarchar(40),
		moneys int,
		payed int,
		total int
)
insert into @tmp
select '0' gno,accc3,accc2,accc5,accc6,accc7,part,bal,
case LEFT(accc5,1) when '1' then dmoney when '2' then cmoney end,
case LEFT(accc5,1) when '1' then cmoney when '2' then dmoney end,0
from acccs101_1 
where (LEFT(accc5,4) = 1191)and
(accc2 between @t_bdate and @t_edate) and
(LEN(bal) > 0 ) and 
(bal like '%'+ @t_xbal +'%')and
(@t_xaccc5 like '%1191%')

union
select '0' gno,accc3,accc2,accc5,accc6,accc7,part,bal,
case LEFT(accc5,1) when '1' then dmoney when '2' then cmoney end,
case LEFT(accc5,1) when '1' then cmoney when '2' then dmoney end,0
from acccs101_1 
where (LEFT(accc5,4) = 2191)and
(accc2 between @t_bdate and @t_edate) and
(LEN(bal) > 0 ) and 
(bal like '%'+ @t_xbal +'%')and
(@t_xaccc5 like '%2191%')

union
select '0' gno,accc3,accc2,accc5,accc6,accc7,part,bal,
case LEFT(accc5,1) when '1' then dmoney when '2' then cmoney end,
case LEFT(accc5,1) when '1' then cmoney when '2' then dmoney end,0
from acccs101_1 
where (LEFT(accc5,4) = 1123)and
(accc2 between @t_bdate and @t_edate) and
(LEN(bal) > 0 ) and 
(bal like '%'+ @t_xbal +'%')and
(@t_xaccc5 like '%1123%')

union
select '0' gno,accc3,accc2,accc5,accc6,accc7,part,bal,
case LEFT(accc5,1) when '1' then dmoney when '2' then cmoney end,
case LEFT(accc5,1) when '1' then cmoney when '2' then dmoney end,0
from acccs101_1 
where (LEFT(accc5,4) = 2123)and
(accc2 between @t_bdate and @t_edate) and
(LEN(bal) > 0 ) and 
(bal like '%'+ @t_xbal +'%')and
(@t_xaccc5 like '%2123%')

declare @t_bal nvarchar(40)
declare @bal nvarchar(40)
declare @accc5 nvarchar(20)
declare @part nvarchar(20)
declare @t_accc5 nvarchar(20)
declare @gno nvarchar(1)
declare @moneys int
declare @payed int
declare @total int
declare @t_moneys int
declare @t_payed int
declare @t_total int

set @t_bal = 'weweewee'
set @t_accc5 = 'weeeeeee'
set @t_moneys = 0
set @t_payed = 0
set @t_total = 0

declare cursor_table cursor for
	select gno,part,accc5,bal,moneys,payed,0 from @tmp   order by part,accc5,bal
	open cursor_table
	fetch next from cursor_table
	into @gno,@part,@accc5,@bal,@moneys,@payed,@total
	while(@@FETCH_STATUS <> -1)
	begin
		if not(@t_bal = @bal) and @gno = 0 
		begin
		if  not(@t_bal = 'weweewee')
		 begin 
			insert into @tmp
			select '1' gno,'','',@t_accc5,'','',@part,@t_bal,@t_moneys,@t_payed,@t_total
		end
			set @t_accc5 = @accc5
			set @t_bal = @bal
			set @t_moneys = @moneys
			set @t_payed = @payed
			set @t_total = @moneys - @payed
		end
		else 
		begin
			set @t_moneys = @t_moneys +@moneys
			set @t_payed = @t_payed +@payed
			set @t_total = @t_total + @moneys - @payed
		end
		fetch next from cursor_table
		into @gno,@part,@accc5,@bal,@moneys,@payed,@total
		
	end
	close cursor_table
	deallocate cursor_table
	if not(@t_bal = 'weweewee')
	begin
		insert into @tmp
		select '1' gno,'','',@t_accc5,'','',@part,@t_bal,@t_moneys,@t_payed,@t_total
	end
	
-----------------------------------------
declare @tmp2 table(
		gno nvarchar(1),
		noa nvarchar(30),
		datea nvarchar(10),
		accc5 nvarchar(20),
		accc6 nvarchar(20),
		accc7 nvarchar(340),
		part nvarchar(20),
		bal nvarchar(40),
		moneys int,
		payed int,
		total int
)


insert into @tmp2	
select *
from @tmp
order by accc5,bal,gno


set @t_total=0
	declare cursor_table cursor for
	select gno,moneys,payed from @tmp2 
	open cursor_table
	fetch next from cursor_table
	into @gno,@moneys,@payed
	while(@@FETCH_STATUS <> -1)
	begin
		if @gno = 0 
		begin
			set @t_total = @t_total + (@moneys - @payed)
			update @tmp2 set total =@t_total where current of cursor_table
		end
		else
		begin
			set @t_total=0
		end
		
		fetch next from cursor_table
		into @gno,@moneys,@payed
		
	end
	close cursor_table
	deallocate cursor_table
	
insert into @tmp2
select '2' gno,'','',accc5,'','','',MAX(bal),0,0,SUM(moneys-payed)
from @tmp2
where not(gno = 1)
group by accc5
	
select gno,noa,datea,accc5,accc6,accc7,part,bal,
reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,moneys),1)),4,12)) moneys,
reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,payed),1)),4,12)) payed,
reverse(substring(reverse(convert(nvarchar(15),CONVERT(money,total),1)),4,12)) total
from @tmp2
order by accc5,bal,gno;


